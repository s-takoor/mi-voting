:PROPERTIES:
#+title: üó≥ MI-VOTING
#+author: s-takoor (202007012)
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
:END:

* TABLE OF CONTENTS :toc:
  - [[#-tldr][üöÄ TL;DR]]
  - [[#-demo][üé¨ DEMO]]
  - [[#-overview][üéØ OVERVIEW]]
  - [[#-technologies-and-tools][üõ† TECHNOLOGIES AND TOOLS]]
  - [[#Ô∏è-setting-up-the-development-environment][üèóÔ∏è SETTING UP THE DEVELOPMENT ENVIRONMENT]]
  - [[#Ô∏è-starting-the-dev-server][‚öôÔ∏è STARTING THE DEV SERVER]]
  - [[#-checklist][‚úÖ CHECKLIST]]
  - [[#-code-statistics][ü§ñ CODE STATISTICS]]
  - [[#-environment-variables][üö® ENVIRONMENT VARIABLES]]

** üöÄ TL;DR
This documentation outlines the process of implementing the blockchain-based e-voting decentralized application (dApp) using Bun as the primary JavaScript runtime and toolkit. It covers setting up the development environment, deploying the smart contract on a local Hardhat Ethereum development environment, and implementing the Mi-Voting dApp.

** üé¨ DEMO
[[https://github.com/s-takoor/mi-voting/blob/main/public/resource/demo.gif][demo]]

** üéØ OVERVIEW
This guide will walk you through the following key steps:
1. Setting up the development environment.
2. Deploying the smart contract on the local Hardhat Ethereum development environment.
3. Implementing the Mi-Voting dApp.

** üõ† TECHNOLOGIES AND TOOLS
Before we begin, ensure you have the following technologies and tools installed:
- [[https://bun.sh/][Bun]]: A fast JavaScript runtime & toolkit;
- [[https://hardhat.org/][Hardhat]]: A development environment for Ethereum smart contract development;
- [[https://ipfs.io/][InterPlanetary File system (IPFS)]]: A peer-to-peer hypermedia protocol for decentralized file storage and sharing;
- [[https://nextjs.org/][Next.js]]: A popular React framework for building server-rendered web applications;
- [[https://chakra-ui.com/][Chakra UI]]: A set of accessible and customizable UI components for React applications.

** üèóÔ∏è SETTING UP THE DEVELOPMENT ENVIRONMENT
*** STEP 1: INITIALIZE A NEXT.JS APP
#+begin_src bash
bun create next-app
#+end_src

*** STEP 2: INSTALL HARDHAT
#+begin_src bash
bun a --dev hardhat
#+end_src

*** STEP 3: INSTALL ETHEREUM LIBRARY
#+begin_src bash
bun a --dev @nomicfoundation/hardhat-ethers ethers
#+end_src

*** STEP 4: CREATE A JAVASCRIPT PROJECT
#+begin_src bash
bunx hardhat
#+end_src

*** STEP 5: INSTALL REQUIRED PACKAGES
#+begin_src bash
bun a dotenv ipfs-api
bun a @chakra-ui/react @emotion/react @emotion/styled framer-motion @chakra-ui/icons
bun a react-icons
#+end_src

*** STEP 6: INITIATE THE HARDHAT NODE
#+begin_src bash
bunx hardhat node
#+end_src

*** STEP 7: INITIATE THE IPFS DAEMON
#+begin_src bash
ipfs daemon
#+end_src

*** STEP 8: COMPILE THE SMART CONTRACT
#+begin_src bash
bunx hardhat compile
#+end_src

*** STEP 9: DEPLOY THE SMART CONTRACT
#+begin_src bash
bunx hardhat run scripts/deploy.js --network localhost
#+end_src

Post-deployment Operations (if the contract has been deployed previously)
- remove the `artifacts` directory
#+begin_src bash
rip artifacts
#+end_src

- remove the `cache` directory
#+begin_src bash
rip cache
#+end_src

** ‚öôÔ∏è STARTING THE DEV SERVER
- with Bun
#+begin_src bash
bun --bun run dev
#+end_src

- with Node.js
#+begin_src bash
bun run dev
#+end_src

Visit http://localhost:3000 in your browser to access the application.

** ‚úÖ CHECKLIST
Before you begin, ensure you've completed the following:
- Installed Bun using the command
#+begin_src bash
curl -fsSL https://bun.sh/install | bash
#+end_src

- Installed IPFS
  + Install IPFS using Homebrew (one-time setup)
#+begin_src bash
brew install ipfs
#+end_src

** ü§ñ CODE STATISTICS
[[https://github.com/XAMPPRocky/tokei][Tokei]]: A lightweight code counter with efficient directory code counting

|------------+-------+-------+-------+----------+--------|
| Language   | Files | Lines | Codes | Comments | Blanks |
|------------+-------+-------+-------+----------+--------|
| HTML       |     2 |   730 |   641 |        2 |     87 |
| JavaScript |    20 |  1695 |  1492 |       13 |    190 |
| JSON       |     5 | 13157 | 13156 |        0 |      1 |
| Org        |     2 |   260 |   225 |        0 |     35 |
| Solidity   |     1 |   180 |   126 |       21 |     33 |
| Plain Text |     2 |   111 |     0 |       81 |     30 |
|------------+-------+-------+-------+----------+--------|
| Total      |    32 | 16133 | 15640 |      117 |    376 |
|------------+-------+-------+-------+----------+--------|
** üö® ENVIRONMENT VARIABLES
This project relies on environment variables for configuring Ethereum and IPFS connections. Before running the project locally, make sure to set up a `.env` file in the root directory with the following content:
#+begin_src sh
# -- ETHEREUM RPC URL -- #
LOCALHOST_URL=http://localhost:8545
HARDHAT_NETWORK_URL=http://localhost:8545

# -- IPFS RPC API SERVER -- #
IPFS_NODE_URL=http://localhost:5001
IPFS_HOST=localhost
IPFS_PORT='5001'

# -- IPFS GATEWAY URL -- #
IPFS_GATEWAY_URL=http://127.0.0.1:8080/ipfs

# -- IPFS CID HASHES -- #
CANDIDATE_0="replace_value"
CANDIDATE_1="replace_value"
CANDIDATE_2="replace_value"

# -- IPFS CID HASHES FILES -- #
IPFS_CONTRACT_METADATA="replace_value"
IPFS_ELECTION_GUIDELINES_CID="replace_value"
IPFS_EVENT_LOGS="replace_value"

# -- SMART CONTRACT ADDRESS -- #
VOTING_CONTRACT_ADDRESS="replace_value"

# -- AUTHORIZATION CHECK -- #
SMART_CONTRACT_OWNER_ADDRESS="replace_value"
SMART_CONTRACT_OWNER_PRIVATE_KEY="replace_value"
#+end_src

Replace the placeholder values with your actual Ethereum and IPFS configurations and CID hashes.
